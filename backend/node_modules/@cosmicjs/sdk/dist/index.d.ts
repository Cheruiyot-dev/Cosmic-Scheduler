type GenericObject = Record<string, any>;
type NonEmptyObject<T extends Record<string, unknown>> = T extends Record<string, never> ? never : T;

type InsertMediaType = {
    media: any;
    folder?: string;
    metadata?: GenericObject;
    trigger_webhook?: boolean;
};

type PromiseFn<T> = (value: any) => T | PromiseLike<T>;
type PromiseFnType<T> = PromiseFn<T> | null;

declare class MethodChaining {
    endpoint: string;
    opts: any;
    constructor(endpoint: string);
    props(props: string | Array<string>): this;
    private parseGraphQLProps;
    sort(sort: string): this;
    skip(skip: number): this;
    useCache(): this;
}

declare class FindOneChaining$1 extends MethodChaining {
    then<FulfilledResult = any, RejectedResult = never>(onFulfilled?: PromiseFnType<FulfilledResult>, onRejected?: PromiseFnType<RejectedResult>): Promise<void>;
}

declare class FindChaining$1 extends MethodChaining {
    limit(limit: number): this;
    then<FulfilledResult = any, RejectedResult = never>(onFulfilled?: PromiseFnType<FulfilledResult>, onRejected?: PromiseFnType<RejectedResult>): Promise<void>;
}

type InsertObjectRevisionType = {
    title?: string;
    slug?: string;
    content?: string;
    publish_at?: number;
    unpublish_at?: number;
    metadata?: GenericObject;
    locale?: string;
    thumbnail?: string;
    trigger_webhook?: boolean;
    pretty?: boolean;
};

/**
 * Options for fetching object data.
 * @property {Object} media - Options for media objects.
 * @property {string} media.props - Comma-separated list of additional properties to fetch for media objects.
 * @typedef {Object} MediaType
 * @property {string} all - All media properties.
 * @property {string} id - The unique identifier of the media object.
 * @property {string} name - The name of the media file.
 * @property {string} original_name - The original name of the media file.
 * @property {number} size - The size of the media file in bytes.
 * @property {string} type - The MIME type of the media file.
 * @property {string} bucket - The bucket identifier.
 * @property {string} created_at - The creation date of the media object.
 * @property {string} folder - The folder where the media is stored.
 * @property {string} url - The URL of the media file.
 * @property {string} imgix_url - The Imgix URL of the media file.
 * @property {string} alt_text - The alternative text for the media.
 */
type OptionsType = {
    media: {
        props: string;
    };
};
declare class Chaining extends MethodChaining {
    depth(depth: number): this;
    status(status: string): this;
    after(after: string): this;
    options(options: OptionsType): this;
}

type APIConfig = {
    apiUrl: string;
    uploadUrl: string;
};
type BucketConfig = {
    bucketSlug: string;
    readKey: string;
    writeKey?: string;
    apiVersion?: 'v3';
    apiEnvironment?: 'staging' | 'production';
    custom?: APIConfig;
};

declare class FindOneChaining extends Chaining {
    private bucketConfig;
    constructor(endpoint: string, bucketConfig: BucketConfig);
    then<FulfilledResult = any, RejectedResult = never>(onFulfilled?: PromiseFnType<FulfilledResult>, onRejected?: PromiseFnType<RejectedResult>): Promise<void>;
}

declare class FindChaining extends Chaining {
    private bucketConfig;
    constructor(endpoint: string, bucketConfig: BucketConfig);
    limit(limit: number): this;
    then<FulfilledResult = any, RejectedResult = never>(onFulfilled?: PromiseFnType<FulfilledResult>, onRejected?: PromiseFnType<RejectedResult>): Promise<void>;
}

declare const createBucketClient: (config: BucketConfig) => {
    objects: {
        find(query: GenericObject): FindChaining;
        findOne<T extends Record<string, unknown>>(query: NonEmptyObject<T>): FindOneChaining;
        insertOne(data: GenericObject): Promise<any>;
        updateOne(id: string, updates: GenericObject): Promise<any>;
        deleteOne(id: string, triggerWebhook?: boolean): Promise<any>;
    };
    objectTypes: {
        find(): Promise<any>;
        findOne(slug: string): Promise<any>;
        insertOne(data: GenericObject): Promise<any>;
        updateOne(slug: string, updates: GenericObject): Promise<any>;
        deleteOne(slug: string): Promise<any>;
    };
    objectRevisions: {
        insertOne(objectId: string, data: InsertObjectRevisionType): Promise<any>;
    };
    media: {
        find(query?: GenericObject | undefined): FindChaining$1;
        findOne<T_1 extends Record<string, unknown>>(query: NonEmptyObject<T_1>): FindOneChaining$1;
        insertOne(params: InsertMediaType): Promise<any>;
        updateOne(id: string, updates: GenericObject): Promise<any>;
        deleteOne(id: string, triggerWebhook?: boolean): Promise<any>;
    };
};

export { createBucketClient };
